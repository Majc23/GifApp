{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","console","log","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAIlB,SAEI,uBACIO,KAAO,OACPC,MAAST,EACTU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,OACvBG,QAAQC,IAAIV,EAAEQ,OAAOF,a,+BCNhBK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,gDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAG/B,OACI,sBAAKc,UAAY,yCAAjB,UAEQ,qBAAKC,IAAOf,EAAMgB,IAAON,IACzB,4BAAIA,QCJPO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACDf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAGGqB,EDbwBK,CAAa1B,GAA/Ba,EAFsB,EAE5BN,KAAaa,EAFe,EAEfA,QAQpB,OACI,qCACI,oBAAIJ,UAAY,oCAAhB,SAAqDhB,IACpDoB,GAAW,mBAAGJ,UAAY,mCAAf,qBACZ,qBAAKA,UAAY,YAAjB,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEgBxBgB,EAnCM,WAAO,IAAD,EAGa3C,mBAAS,CAAC,cAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAYvB,OACA,mCACG,gCACC,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADPA,c,MCtB7B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.01dd7cd1.chunk.js","sourcesContent":["import React,{useState}from 'react'\nimport PropType from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n        console.log(e.target.value);\n    }\n    const handleSubit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            //console.log(\"Submit hecho\");\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit = {handleSubit}>  \n            \n            <input\n                type = \"text\"\n                value = {inputValue}\n                onChange = {handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropType.func.isRequired\n}","\n\nexport const getGifs = async(category) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XEt96if8evGAZdpw9yhb0FlmmCExlZHF`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    })\n\n    \n    \n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    //console.log({title,url});\n\n    return (\n        <div className = \"card animate__animated animate__fadeIn\" >\n            \n                <img src ={ url } alt = {title}/>\n                <p>{title}</p>\n                   \n        </div>\n    )\n}\n","import React, {/*useState, useEffect*/} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images,loading} = useFetchGifs(category);\n    \n  \n    \n   \n\n    \n\n    return (\n        <>\n            <h3 className = \"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className = \"animate__animated animate__flash\">Loading</p>}\n            <div className = \"card-grid\">\n                    {\n                        images.map(img => (\n                            <GifGridItem \n                            key = {img.id}\n                            {...img}\n                            />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import {useEffect, useState} from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n        .then(imgs => { \n            setstate({\n                    data: imgs,\n                    loading: false\n            });\n        })\n    }, [category]);\n    \n\n    return state;//{data:[], loading: true}\n}\n","import React,{useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState(['One punch']);\n    \n    /*const handleAdd = () => {\n        //setCategories(['Naruto',...categories]);//Coloca el nuevo elemento en la posicion 0\n        //setCategories([...categories,'Naruto']);//Coloca el nuevo elemento en la ultima posicon\n        //setCategories(cats => [...categories,'Naruto']);\n        setCategories(cats => ['Naruto',...categories,]);\n    };*/\n\n    return (\n    <>\n       <div>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories = {setCategories}/> \n        <hr/>\n       \n\n        <ol>\n            {\n                categories.map( category =>  \n                    <GifGrid \n                        key={category}\n                        category = {category}\n                    />\n                )\n            }\n        </ol>\n       </div> \n    </>    \n    );\n}\n\nexport default GifExpertApp ;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}